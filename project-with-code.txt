### D:\ICANIO intern\React\dashboard-project\src\components\Charts\AbsenteeHeatmap.jsx
import { Bar } from 'react-chartjs-2';
import { Box, Typography, useTheme } from '@mui/material';
import { motion } from 'framer-motion';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import ChartDataLabels from 'chartjs-plugin-datalabels';

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ChartDataLabels);

const AbsenteeHeatmap = ({ data }) => {
  const theme = useTheme();

  const absenteeData = data.reduce((acc, item) => {
    const manager = item.Manager?.trim() || 'Unknown';
    const isAbsent = item['Attendance Status (Present?)']?.toString().toLowerCase() === 'no';

    if (!acc[manager]) acc[manager] = { count: 0, total: 0 };
    acc[manager].total++;
    if (isAbsent) acc[manager].count++;
    return acc;
  }, {});

  const sortedManagers = Object.keys(absenteeData).sort(
    (a, b) => absenteeData[b].count - absenteeData[a].count
  );

  const generateBlueColors = (count) => {
    return Array.from({ length: count }, (_, i) => 
      `hsl(${200 + (i * 30) % 60}, 70%, ${50 + (i % 3) * 10}%)`
    );
  };

  const chartData = {
    labels: sortedManagers,
    datasets: [{
      label: 'Absentees',
      data: sortedManagers.map(manager => absenteeData[manager].count),
      backgroundColor: generateBlueColors(sortedManagers.length),
      borderRadius: 10,
      barThickness: 40,
      hoverBorderWidth: 3,
      hoverBorderColor: theme.palette.error.light,
    }]
  };

  const options = {
    responsive: true,
    maintainAspectRatio: false,
    indexAxis: 'x',
    animation: {
      duration: 1500,
      easing: 'easeOutElastic'
    },
    layout: {
      padding: { top: 30, right: 30, bottom: 40, left: 20 }
    },
    plugins: {
      legend: { display: false },
      datalabels: {
        color: theme.palette.text.primary,
        font: {
          weight: 'bold',
          size: 14,
          family: "'Montserrat', sans-serif",
        },
        anchor: 'end',
        align: 'end',
        formatter: (value) => `${value}`,
      },
      tooltip: {
        backgroundColor: theme.palette.background.default,
        titleColor: theme.palette.error.light,
        bodyColor: theme.palette.text.primary,
        borderColor: theme.palette.divider,
        borderWidth: 1,
        cornerRadius: 12,
        titleFont: { size: 16, weight: 'bold', family: "'Montserrat', sans-serif" },
        bodyFont: { size: 14, family: "'Montserrat', sans-serif" },
        callbacks: {
          title: (context) => `Manager: ${context[0].label}`,
          label: (context) => {
            const mgr = absenteeData[context.label];
            const absent = mgr.count;
            const present = mgr.total - absent;
            const percentage = Math.round((absent / mgr.total) * 100);
            return [
              `Absent: ${absent}`,
              `Present: ${present}`,
              `Total: ${mgr.total}`,
              `Absentee Rate: ${percentage}%`
            ];
          },
        },
        displayColors: false,
      }
    },
    scales: {
      x: {
        grid: { display: false, drawBorder: false },
        ticks: {
          color: theme.palette.text.primary,
          font: { size: 13, weight: 'bold', family: "'Montserrat', sans-serif" },
          padding: 10,
        },
        title: {
          display: true,
          text: 'Managers',
          color: theme.palette.primary.main,
          font: { size: 16, weight: 'bold', family: "'Montserrat', sans-serif" },
          padding: { top: 20 },
        }
      },
      y: {
        beginAtZero: true,
        grid: {
          color: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.05)' : 'rgba(0,0,0,0.05)',
          drawBorder: false
        },
        ticks: {
          color: theme.palette.text.secondary,
          font: { size: 13, family: "'Montserrat', sans-serif" },
          precision: 0,
          padding: 10,
        },
        title: {
          display: true,
          text: 'Number of Absentees',
          color: theme.palette.primary.main,
          font: { size: 16, weight: 'bold', family: "'Montserrat', sans-serif" },
          padding: { bottom: 20 },
        }
      }
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.6, delay: 0.2 }}
    >
      <Box sx={{
        width: '100%',
        height: 'calc(100vh - 180px)',
        background: theme.palette.mode === 'dark'
          ? 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)'
          : 'linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%)',
        borderRadius: 3,
        boxShadow: theme.shadows[10],
        p: 3,
        overflow: 'hidden',
        border: theme.palette.mode === 'dark'
          ? '1px solid rgba(255,255,255,0.1)'
          : '1px solid rgba(0,0,0,0.1)'
      }}>
        <Box data-export-container sx={{
          height: '100%',
          overflow: 'auto',
          '&::-webkit-scrollbar': { 
            width: 10,
            height: 10
          },
          '&::-webkit-scrollbar-thumb': {
            background: theme.palette.mode === 'dark'
              ? 'linear-gradient(135deg, #4a6fa5, #166d67)'
              : 'linear-gradient(135deg, #1976d2, #0288d1)',
            borderRadius: 4,
            border: theme.palette.mode === 'dark'
              ? '1px solid rgba(255,255,255,0.1)'
              : '1px solid rgba(255,255,255,0.3)'
          },
          '&::-webkit-scrollbar-track': {
            background: theme.palette.mode === 'dark'
              ? 'rgba(255,255,255,0.05)'
              : 'rgba(0,0,0,0.05)',
            borderRadius: 4
          },
          '&::-webkit-scrollbar-corner': {
            background: 'transparent'
          }
        }}>
          <Box sx={{ 
            minWidth: 'fit-content',
            minHeight: 'fit-content',
            padding: 1
          }}>
            <Bar 
              data={chartData} 
              options={options} 
              style={{ 
                minWidth: Math.max(sortedManagers.length * 100, 800),
                minHeight: 500 
              }} 
            />
          </Box>
        </Box>
        <motion.div
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ delay: 0.4 }}
        >
          <Typography
            align="right"
            sx={{
              mt: 2,
              fontWeight: 'bold',
              background: theme.palette.mode === 'dark'
                ? 'linear-gradient(90deg, #4a6fa5, #166d67)'
                : 'linear-gradient(90deg, #1976d2, #0288d1)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              fontSize: 16
            }}
          >
            Total Managers: {sortedManagers.length}
          </Typography>
        </motion.div>
      </Box>
    </motion.div>
  );
};

export default AbsenteeHeatmap;


### D:\ICANIO intern\React\dashboard-project\src\components\Charts\AttendanceChart.jsx
import { Bar } from 'react-chartjs-2';
import { Box, useTheme } from '@mui/material';
import { motion } from 'framer-motion';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import { useMemo } from 'react';

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const AttendanceChart = ({ data = [] }) => {
  const theme = useTheme();

  const { chartData, chartOptions, maxPresent, attendanceSummary } = useMemo(() => {
    const summary = data.reduce((acc, { Manager = 'Unknown', 'Attendance Status (Present?)': status }) => {
      const manager = Manager.trim() || 'Unknown';
      const isPresent = status?.toString().toLowerCase() === 'yes';
      if (!acc[manager]) acc[manager] = { present: 0, total: 0 };
      acc[manager].total++;
      if (isPresent) acc[manager].present++;
      return acc;
    }, {});

    const sortedManagers = Object.keys(summary).sort(
      (a, b) => summary[b].present - summary[a].present
    );

    const maxPresent = Math.max(...sortedManagers.map(mgr => summary[mgr].present));

    const generateBlueColors = (count) => {
      return Array.from({ length: count }, (_, i) => 
        `hsl(${200 + (i * 20) % 80}, 80%, ${50 + (i % 4) * 7}%)`
      );
    };

    const chartData = {
      labels: sortedManagers,
      datasets: [{
        label: 'Number of Present Employees',
        data: sortedManagers.map(mgr => summary[mgr].present),
        backgroundColor: generateBlueColors(sortedManagers.length),
        borderColor: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.2)' : 'rgba(0,0,0,0.1)',
        borderWidth: 1,
        borderRadius: 8,
        barThickness: 40,
        hoverBorderWidth: 3,
        hoverBorderColor: theme.palette.success.light,
      }]
    };

    const chartOptions = {
      responsive: true,
      maintainAspectRatio: false,
      indexAxis: 'x',
      layout: {
        padding: { top: 30, right: 40, bottom: 50, left: 30 }
      },
      animation: {
        duration: 1500,
        easing: 'backOut',
        delay: ctx => ctx.dataIndex * 70
      },
      plugins: {
        legend: { display: false },
        tooltip: {
          backgroundColor: theme.palette.background.default,
          titleColor: theme.palette.success.light,
          bodyColor: theme.palette.text.primary,
          borderColor: theme.palette.divider,
          borderWidth: 2,
          padding: 16,
          cornerRadius: 12,
          callbacks: {
            title: (context) => [`Manager: ${context[0].label}`],
            label: (context) => {
              const mgrData = summary[context.label];
              const percent = Math.round((mgrData.present / mgrData.total) * 100);
              return [
                `Present: ${context.raw}`,
                `Absent: ${mgrData.total - mgrData.present}`,
                `Total: ${mgrData.total}`,
                `Attendance Rate: ${percent}%`
              ];
            },
            footer: () => ['Click for employee details']
          },
          displayColors: false,
        },
      },
      scales: {
        x: {
          grid: { display: false },
          ticks: {
            color: theme.palette.text.primary,
            font: { family: "'Montserrat', sans-serif", size: 13, weight: 'bold' },
            padding: 10
          },
          title: {
            display: true,
            text: 'Managers',
            font: { size: 16, weight: 'bold', family: "'Montserrat', sans-serif" },
            color: theme.palette.primary.light,
            padding: { top: 20 }
          }
        },
        y: {
          beginAtZero: true,
          max: Math.ceil(maxPresent * 1.2),
          grid: {
            color: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.05)' : 'rgba(0,0,0,0.05)',
          },
          ticks: {
            color: theme.palette.text.secondary,
            font: { family: "'Montserrat', sans-serif", size: 13 },
            padding: 10
          },
          title: {
            display: true,
            text: 'No. of Employees Present',
            font: { size: 16, weight: 'bold', family: "'Montserrat', sans-serif" },
            color: theme.palette.primary.light,
            padding: { bottom: 20 }
          }
        }
      },
      onHover: (event, chartElement) => {
        event.native.target.style.cursor = chartElement.length ? 'pointer' : 'default';
      }
    };

    return { chartData, chartOptions, maxPresent, attendanceSummary: summary };
  }, [data, theme]);

  const valueLabelPlugin = {
    id: 'valueLabels',
    afterDatasetsDraw(chart) {
      const { ctx, data } = chart;
      ctx.save();
      ctx.font = `bold 14px 'Montserrat', sans-serif`;
      ctx.textAlign = 'center';
      ctx.textBaseline = 'bottom';

      chart.getDatasetMeta(0).data.forEach((bar, index) => {
        const value = data.datasets[0].data[index];
        const { x, y } = bar.tooltipPosition();
        ctx.fillStyle = theme.palette.background.paper;
        ctx.shadowColor = 'rgba(0,0,0,0.2)';
        ctx.shadowBlur = 8;
        ctx.fillRect(x - 22, y - 24, 44, 24);

        ctx.shadowColor = 'transparent';
        ctx.fillStyle = theme.palette.text.primary;
        ctx.fillText(value, x, y - 6);
      });

      ctx.restore();
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.6 }}
    >
      <Box
        sx={{
          width: '100%',
          height: 'calc(100vh - 180px)',
          borderRadius: '18px',
          background: theme.palette.mode === 'dark'
            ? 'linear-gradient(135deg, #1a1a2e, #16213e)'
            : 'linear-gradient(135deg, #f5f7fa, #e4e8f0)',
          boxShadow: theme.shadows[10],
          p: 4,
          overflow: 'hidden',
          border: theme.palette.mode === 'dark'
            ? '1px solid rgba(255,255,255,0.1)'
            : '1px solid rgba(0,0,0,0.1)'
        }}
      >
        <Box data-export-container sx={{
          width: '100%',
          height: '100%',
          overflow: 'auto',
          '&::-webkit-scrollbar': { 
            width: 10,
            height: 10
          },
          '&::-webkit-scrollbar-thumb': {
            background: theme.palette.mode === 'dark'
              ? 'linear-gradient(135deg, #4a6fa5, #166d67)'
              : 'linear-gradient(135deg, #1976d2, #0288d1)',
            borderRadius: 10,
            border: theme.palette.mode === 'dark'
              ? '1px solid rgba(255,255,255,0.1)'
              : '1px solid rgba(255,255,255,0.3)'
          },
          '&::-webkit-scrollbar-track': {
            background: theme.palette.mode === 'dark'
              ? 'rgba(255,255,255,0.05)'
              : 'rgba(0,0,0,0.05)',
            borderRadius: 10
          },
          '&::-webkit-scrollbar-corner': {
            background: 'transparent'
          }
        }}>
          <Box sx={{ 
            minWidth: 'fit-content',
            minHeight: 'fit-content',
            padding: 1
          }}>
            <Bar 
              data={chartData} 
              options={chartOptions} 
              plugins={[valueLabelPlugin]}
              style={{ 
                minWidth: Math.max(chartData.labels.length * 100, 800),
                minHeight: 500 
              }}
            />
          </Box>
        </Box>
      </Box>
    </motion.div>
  );
};

export default AttendanceChart;


### D:\ICANIO intern\React\dashboard-project\src\components\Charts\chartUtils.js
import { schemeCategory10, schemePastel2, schemeSet3 } from 'd3-scale-chromatic';

export const generateUniqueColors = (count, alpha = 0.8) => {
  const colors = [];
  const schemes = [schemeCategory10, schemePastel2, schemeSet3];
  const schemeIndex = Math.floor(Math.random() * schemes.length);
  
  for (let i = 0; i < count; i++) {
    const hue = (i * 360 / count) % 360;
    const saturation = 70 + Math.random() * 20;
    const lightness = 50 + Math.random() * 10;
    colors.push(`hsla(${hue}, ${saturation}%, ${lightness}%, ${alpha})`);
  }
  return colors;
};

export const getInitials = (name) => {
  return name.split(' ').map(n => n[0]).join('');
};

export const getRandomColorFromScheme = (index) => {
  const schemes = [schemeCategory10, schemePastel2, schemeSet3];
  const schemeIndex = index % schemes.length;
  const colorIndex = Math.floor(index / schemes.length) % schemes[schemeIndex].length;
  return schemes[schemeIndex][colorIndex];
};

export const getColorForValue = (value, maxValue) => {
  const ratio = value / maxValue;
  const hue = (1 - ratio) * 120;
  return `hsl(${hue}, 70%, 50%)`;
};


### D:\ICANIO intern\React\dashboard-project\src\components\Charts\ChartView.jsx
// D:\ICANIO intern\React\dashboard-project\src\components\Charts\ChartView.jsx
import React, { useState, useRef, useMemo } from 'react';
import {
  Box, Typography, Paper, Avatar, Button, useTheme, IconButton,
  FormControl, Select, MenuItem, useMediaQuery, LinearProgress,
  Stack, ButtonGroup
} from '@mui/material';
import { FiDownload, FiPieChart, FiChevronLeft, FiChevronRight, FiArrowLeft } from 'react-icons/fi';
import { usePromiseTracker, trackPromise } from 'react-promise-tracker';
import { motion, AnimatePresence } from 'framer-motion';
import { PDFExportManager } from '../../utils/pdfExport';
import ScoreChart from './ScoreChart';
import SelfInterestChart from './SelfInterestChart';
import AbsenteeHeatmap from './AbsenteeHeatmap';
import AttendanceChart from './AttendanceChart';
import IntegrityTable from './IntegrityTable';

const ChartView = ({ data, onToggleView }) => {
  const theme = useTheme();
  const { promiseInProgress } = usePromiseTracker();
  const [currentChart, setCurrentChart] = useState(0);
  const [selectedManager, setSelectedManager] = useState('All Managers');
  const chartRefs = useRef([]);
  const isMobile = useMediaQuery('(max-width:600px)');
  const isTablet = useMediaQuery('(max-width:900px)');

  const managers = useMemo(() => [
    'All Managers',
    ...new Set(data.map(item => item.Manager?.trim() || 'Unknown'))
  ], [data]);

  const filteredData = useMemo(() => (
    selectedManager === 'All Managers'
      ? data
      : data.filter(item => (item.Manager?.trim() || 'Unknown') === selectedManager)
  ), [data, selectedManager]);

  const charts = [
    { title: 'Overall Score Distribution', component: <ScoreChart data={filteredData} /> },
    { title: 'Self Interested Candidates', component: <SelfInterestChart data={filteredData} /> },
    { title: 'Absentee Analysis', component: <AbsenteeHeatmap data={filteredData} /> },
    { title: 'Attendance by Manager', component: <AttendanceChart data={filteredData} /> },
    { title: 'Integrity Scores', component: <IntegrityTable data={filteredData} /> },
  ];

  const handleDownloadPDF = async () => {
    const chartIndex = currentChart;
    const chartComponent = chartRefs.current[chartIndex];
    if (!chartComponent) return;

    try {
      const cleanupViewport = PDFExportManager.handleMobileViewport();
      const exportContainer = chartComponent.querySelector('[data-export-container]');

      const { canvas, title } = await trackPromise(
        PDFExportManager.captureFullContent(
          exportContainer || chartComponent,
          charts[chartIndex].title
        )
      );

      const pdf = await PDFExportManager.generatePDF(
        { canvas, title },
        chartIndex !== 4 // Portrait for IntegrityTable
      );

      pdf.save(`${title.replace(/[^\w]/g, '_')}.pdf`);
      cleanupViewport();
    } catch (error) {
      console.error('PDF Export Error:', error);
    }
  };

  const navigateChart = (direction) => {
    const newIndex = direction === 'next' 
      ? (currentChart + 1) % charts.length
      : (currentChart - 1 + charts.length) % charts.length;
    setCurrentChart(newIndex);
  };

  return (
    <Box sx={{ p: isMobile ? 1 : 3, height: '100vh', overflow: 'hidden', position: 'relative' }}>
      <AnimatePresence>
        {promiseInProgress && (
          <Box sx={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.9)',
            zIndex: 9999,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            flexDirection: 'column',
            color: '#fff'
          }}>
            <Typography variant="h6" gutterBottom>Generating PDF...</Typography>
            <LinearProgress sx={{ width: 300, height: 8, borderRadius: 4 }} />
          </Box>
        )}
      </AnimatePresence>

      {/* Responsive Header Section */}
      <Box sx={{
        display: 'flex',
        flexDirection: isMobile ? 'column' : 'row',
        justifyContent: 'space-between',
        alignItems: isMobile ? 'flex-start' : 'center',
        mb: 2,
        gap: 2
      }}>
        <Box sx={{ 
          display: 'flex', 
          alignItems: 'center', 
          gap: 2,
          width: isMobile ? '100%' : 'auto'
        }}>
          <Avatar sx={{ 
            bgcolor: 'primary.main',
            width: isMobile ? 36 : 48,
            height: isMobile ? 36 : 48
          }}>
            <FiPieChart size={isMobile ? 18 : 24} />
          </Avatar>
          <Typography variant={isMobile ? 'h6' : 'h5'} fontWeight="bold" noWrap>
            {charts[currentChart].title}
          </Typography>
        </Box>

        <Stack 
          direction={isMobile ? 'column' : 'row'} 
          spacing={1}
          sx={{ 
            width: isMobile ? '100%' : 'auto',
            '& .MuiFormControl-root': { width: isMobile ? '100%' : 180 }
          }}
        >
          <FormControl size="small">
            <Select
              value={selectedManager}
              onChange={(e) => setSelectedManager(e.target.value)}
              sx={{
                bgcolor: 'primary.main',
                color: 'primary.contrastText',
                '& .MuiSelect-select': { py: 1 }
              }}
            >
              {managers.map(manager => (
                <MenuItem key={manager} value={manager}>
                  {isMobile ? manager.substring(0, 15) + (manager.length > 15 ? '...' : '') : manager}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          
          <ButtonGroup fullWidth={isMobile} sx={{ gap: 1 }}>
            <Button
              variant="contained"
              startIcon={<FiDownload size={18} />}
              onClick={handleDownloadPDF}
              sx={{ 
                textTransform: 'none',
                flex: isMobile ? 1 : 'none'
              }}
            >
              {isMobile ? 'PDF' : 'Export PDF'}
            </Button>
            
            <Button
              variant="outlined"
              startIcon={<FiArrowLeft size={18} />}
              onClick={onToggleView}
              sx={{ 
                textTransform: 'none',
                flex: isMobile ? 1 : 'none'
              }}
            >
              {isMobile ? 'Table' : 'Back to Table'}
            </Button>
          </ButtonGroup>
        </Stack>
      </Box>

      {/* Charts Container */}
      <Paper elevation={3} sx={{
        width: '100%',
        height: isMobile ? 'calc(100vh - 160px)' : 'calc(100vh - 180px)',
        borderRadius: theme.shape.borderRadius,
        boxShadow: theme.shadows[4],
        backgroundColor: theme.palette.background.paper,
        position: 'relative',
        overflow: 'hidden'
      }}>
        <Box sx={{
          width: '100%',
          height: '100%',
          position: 'relative',
          overflow: 'hidden'
        }}>
          {charts.map((chart, index) => (
            <Box
              key={index}
              ref={el => chartRefs.current[index] = el}
              sx={{
                position: 'absolute',
                width: '100%',
                height: '100%',
                left: `${(index - currentChart) * 100}%`,
                transition: 'left 0.3s ease',
                p: isMobile ? 1 : 2
              }}
            >
              {chart.component}
            </Box>
          ))}
        </Box>

        {/* Navigation Dots */}
        <Box sx={{
          position: 'absolute',
          bottom: 16,
          left: '50%',
          transform: 'translateX(-50%)',
          display: 'flex',
          gap: 1
        }}>
          {charts.map((_, index) => (
            <Box
              key={index}
              sx={{
                width: 10,
                height: 10,
                borderRadius: '50%',
                bgcolor: currentChart === index ? 'primary.main' : 'action.disabled',
                cursor: 'pointer',
                transition: 'background-color 0.2s'
              }}
              onClick={() => setCurrentChart(index)}
            />
          ))}
        </Box>

        {/* Navigation Arrows */}
        <IconButton
          onClick={() => navigateChart('prev')}
          sx={{ 
            position: 'absolute', 
            left: 8, 
            top: '50%',
            bgcolor: 'background.paper',
            boxShadow: 1,
            '&:hover': { bgcolor: 'action.hover' }
          }}
        >
          <FiChevronLeft />
        </IconButton>
        <IconButton
          onClick={() => navigateChart('next')}
          sx={{ 
            position: 'absolute', 
            right: 8, 
            top: '50%',
            bgcolor: 'background.paper',
            boxShadow: 1,
            '&:hover': { bgcolor: 'action.hover' }
          }}
        >
          <FiChevronRight />
        </IconButton>
      </Paper>
    </Box>
  );
};

export default ChartView;


### D:\ICANIO intern\React\dashboard-project\src\components\Charts\IntegrityTable.jsx
// D:\ICANIO intern\React\dashboard-project\src\components\Charts\IntegrityTable.jsx
import React, { forwardRef, useRef, useState, useEffect } from 'react';
import {
  Box,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Typography,
  TableSortLabel,
  Tooltip,
  useTheme,
  Avatar
} from '@mui/material';
import { motion } from 'framer-motion';
import { getInitials } from './chartUtils';

const IntegrityTable = forwardRef(({ data }, ref) => {
  const theme = useTheme();
  const [order, setOrder] = useState('desc');
  const [orderBy, setOrderBy] = useState('Integrity Score (out of 10)');
  const containerRef = useRef(null);
  const tableRef = useRef(null);

  useEffect(() => {
    if (containerRef.current) {
      containerRef.current.scrollTop = 0;
    }
  }, [data]);

  const handleSort = (property) => {
    const isAsc = orderBy === property && order === 'asc';
    setOrder(isAsc ? 'desc' : 'asc');
    setOrderBy(property);
  };

  const sortedData = [...data].sort((a, b) => {
    const aVal = a[orderBy] || 0;
    const bVal = b[orderBy] || 0;
    return order === 'asc' ? aVal - bVal : bVal - aVal;
  });

  return (
    <Box
      ref={ref}
      data-export-container
      sx={{
        width: '100%',
        height: 'calc(100vh - 180px)',
        overflow: 'hidden',
        position: 'relative'
      }}
    >
      <Typography variant="h6" sx={{
        mb: 2,
        fontWeight: 700,
        background: theme.palette.mode === 'dark'
          ? 'linear-gradient(90deg, #4a6fa5, #166d67)'
          : 'linear-gradient(90deg, #1976d2, #0288d1)',
        WebkitBackgroundClip: 'text',
        WebkitTextFillColor: 'transparent',
        p: 2
      }}>
        Integrity Scores Overview
      </Typography>

      <TableContainer ref={containerRef} sx={{
        height: 'calc(100% - 80px)',
        '&::-webkit-scrollbar': { width: 10, height: 10 },
        '&::-webkit-scrollbar-thumb': {
          background: theme.palette.mode === 'dark'
            ? 'linear-gradient(135deg, #4a6fa5, #166d67)'
            : 'linear-gradient(135deg, #1976d2, #0288d1)',
          borderRadius: 4
        },
        '&::-webkit-scrollbar-track': {
          backgroundColor: theme.palette.mode === 'dark'
            ? 'rgba(255,255,255,0.05)'
            : 'rgba(0,0,0,0.05)'
        }
      }}>
        <Table ref={tableRef} stickyHeader size="small">
          <TableHead>
            <TableRow>
              <TableCell
                sx={{
                  position: 'sticky',
                  top: 0,
                  backgroundColor: theme.palette.mode === 'dark'
                    ? 'rgba(26, 32, 53, 0.9)'
                    : 'rgba(245, 247, 250, 0.9)',
                  minWidth: 300,
                  width: 300
                }}
              >
                Candidate
              </TableCell>
              {['Integrity Score (out of 10)', 'Time Spent Offtab (in secs)'].map((column) => (
                <TableCell
                  key={column}
                  align="right"
                  sx={{
                    position: 'sticky',
                    top: 0,
                    backgroundColor: theme.palette.mode === 'dark'
                      ? 'rgba(26, 32, 53, 0.9)'
                      : 'rgba(245, 247, 250, 0.9)',
                    minWidth: 200,
                    width: 200
                  }}
                >
                  <TableSortLabel
                    active={orderBy === column}
                    direction={orderBy === column ? order : 'asc'}
                    onClick={() => handleSort(column)}
                  >
                    {column === 'Time Spent Offtab (in secs)' ? 'Off-task Time' : 'Integrity Score'}
                  </TableSortLabel>
                </TableCell>
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {sortedData.map((row, index) => (
              <TableRow key={index}>
                <TableCell sx={{ display: 'flex', alignItems: 'center' }}>
                  <Avatar
                    sx={{
                      width: 32,
                      height: 32,
                      mr: 2,
                      bgcolor: `hsl(${180 + (index * 137.5) % 60}, 70%, ${
                        theme.palette.mode === 'dark' ? '40%' : '70%'
                      })`
                    }}
                  >
                    {getInitials(row.Name)}
                  </Avatar>
                  <Typography variant="body2" fontWeight={600}>
                    {row.Name}
                  </Typography>
                </TableCell>
                <TableCell align="right">
                  <Box
                    sx={{
                      display: 'inline-flex',
                      px: 2,
                      py: 1,
                      borderRadius: '16px',
                      fontWeight: 600,
                      backgroundColor:
                        row['Integrity Score (out of 10)'] >= 8
                          ? theme.palette.mode === 'dark'
                            ? 'rgba(46, 125, 50, 0.3)'
                            : 'rgba(46, 125, 50, 0.15)'
                          : row['Integrity Score (out of 10)'] >= 5
                            ? theme.palette.mode === 'dark'
                              ? 'rgba(237, 108, 2, 0.3)'
                              : 'rgba(237, 108, 2, 0.15)'
                            : theme.palette.mode === 'dark'
                              ? 'rgba(211, 47, 47, 0.3)'
                              : 'rgba(211, 47, 47, 0.15)'
                    }}
                  >
                    {row['Integrity Score (out of 10)']}/10
                  </Box>
                </TableCell>
                <TableCell align="right">
                  <Box
                    sx={{
                      display: 'inline-flex',
                      px: 2,
                      py: 1,
                      borderRadius: '16px',
                      fontWeight: 600,
                      backgroundColor: row['Time Spent Offtab (in secs)'] > 0
                        ? theme.palette.mode === 'dark'
                          ? 'rgba(211, 47, 47, 0.3)'
                          : 'rgba(211, 47, 47, 0.15)'
                        : theme.palette.mode === 'dark'
                          ? 'rgba(46, 125, 50, 0.3)'
                          : 'rgba(46, 125, 50, 0.15)'
                    }}
                  >
                    {row['Time Spent Offtab (in secs)'] > 0
                      ? `${Math.floor(row['Time Spent Offtab (in secs)']/60)}m ${row['Time Spent Offtab (in secs)']%60}s`
                      : 'None'}
                  </Box>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </Box>
  );
});

export default IntegrityTable;


### D:\ICANIO intern\React\dashboard-project\src\components\Charts\ScoreChart.jsx
// D:\ICANIO intern\React\dashboard-project\src\components\Charts\ScoreChart.jsx
import React, { useRef, useEffect, useMemo } from 'react';
import { Box, useTheme, useMediaQuery } from '@mui/material';
import { Bar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

// Enhanced percentage plugin with perfect end-of-bar positioning
const percentagePlugin = {
  id: 'barPercentage',
  afterDatasetsDraw: (chart) => {
    const { ctx, data, chartArea: { right }, scales: { x, y } } = chart;
    
    data.datasets.forEach((dataset, datasetIndex) => {
      const meta = chart.getDatasetMeta(datasetIndex);
      meta.data.forEach((bar, index) => {
        const value = dataset.data[index];
        // Position at bar end + 8px padding
        const xPos = x.getPixelForValue(value) + (value === 100 ? 15 : 8);
        const yPos = bar.y;
        
        ctx.save();
        ctx.font = `bold ${chart.options.plugins.barPercentage.fontSize}px 'Montserrat'`;
        ctx.fillStyle = chart.options.plugins.barPercentage.fontColor;
        ctx.textAlign = 'left';
        ctx.textBaseline = 'middle';
        // Only draw if within chart area (with 5px buffer)
        if (xPos < right - 5) {
          ctx.fillText(`${value}%`, xPos, yPos);
        }
        ctx.restore();
      });
    });
  }
};

const ScoreChart = ({ data }) => {
  const theme = useTheme();
  const chartRef = useRef(null);
  const containerRef = useRef(null);
  const isMobile = useMediaQuery('(max-width:600px)');
  const isTablet = useMediaQuery('(max-width:900px)');

  const sortedData = useMemo(() => 
    [...data].sort((a, b) => b['Overall Percentage'] - a['Overall Percentage']), 
    [data]
  );

  const generateBlueColors = (count) => {
    return Array.from({ length: count }, (_, i) =>
      `hsl(${190 + (i * 15) % 70}, 85%, ${50 + (i % 5) * 6}%)`
    );
  };

  const chartData = {
    labels: sortedData.map(item => item.Name),
    datasets: [{
      label: 'Score (%)',
      data: sortedData.map(item => item['Overall Percentage']),
      backgroundColor: generateBlueColors(sortedData.length),
      borderColor: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.2)' : 'rgba(0,0,0,0.15)',
      borderWidth: 1,
      borderRadius: 6,
      barThickness: isMobile ? 20 : 26,
      categoryPercentage: 0.85,
      barPercentage: 0.9
    }]
  };

  const options = {
    indexAxis: 'y',
    responsive: true,
    maintainAspectRatio: false,
    layout: {
      padding: {
        left: isMobile ? 25 : 45, // Increased left padding for names
        right: isMobile ? 80 : 100, // More space for percentages
        top: 20,
        bottom: 20
      }
    },
    plugins: {
      legend: { display: false },
      tooltip: {
        callbacks: {
          label: (context) => `${context.parsed.x}%`
        }
      },
      barPercentage: {
        fontSize: isMobile ? 12 : 14,
        fontColor: theme.palette.text.primary
      }
    },
    scales: {
      x: {
        max: 105, // Extra space for 100% label
        min: 0,
        ticks: {
          callback: (value) => `${value}%`,
          font: { 
            size: isMobile ? 11 : 13,
            family: "'Montserrat', sans-serif",
          },
          color: theme.palette.text.secondary,
          stepSize: 10
        },
        grid: {
          drawTicks: false,
          color: theme.palette.mode === 'dark' 
            ? 'rgba(255,255,255,0.05)' 
            : 'rgba(0,0,0,0.05)'
        },
        afterFit: (axis) => {
          axis.paddingRight = 25; // Ensure space for 100% labels
        }
      },
      y: { 
        ticks: {
          font: {
            size: isMobile ? 14 : 16,
            family: "'Montserrat', sans-serif",
            weight: 600
          },
          color: theme.palette.text.primary,
          padding: 10,
          callback: (value) => {
            const label = chartData.labels[value];
            if (isMobile) {
              return label?.length > 18 ? `${label.substring(0, 15)}...` : label;
            }
            return label;
          }
        },
        grid: { display: false },
        afterFit: (axis) => {
          axis.width = isMobile ? 200 : 250; // Fixed width for perfect centering
        }
      }
    }
  };

  return (
    <Box
      data-export-container
      ref={containerRef}
      sx={{
        width: '100%',
        height: '100%',
        overflow: 'auto',
        p: 1,
        display: 'flex',
        justifyContent: 'center',
        '& > div': {
          width: '100%',
          minWidth: isMobile ? '100%' : '850px',
          margin: '0 auto !important',
          minHeight: Math.max(sortedData.length * 45, 550),
        }
      }}
    >
      <Bar
        ref={chartRef}
        data={chartData}
        options={options}
        plugins={[percentagePlugin]}
      />
    </Box>
  );
};

export default ScoreChart;


### D:\ICANIO intern\React\dashboard-project\src\components\Charts\SelfInterestChart.jsx
import { useRef, useImperativeHandle, forwardRef, useMemo } from 'react';
import { Bar } from 'react-chartjs-2';
import { Box, useTheme } from '@mui/material';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import ChartDataLabels from 'chartjs-plugin-datalabels';

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ChartDataLabels
);

const SelfInterestChart = forwardRef(({ data }, ref) => {
  const theme = useTheme();
  const chartRef = useRef();

  useImperativeHandle(ref, () => ({
    downloadPDF: async () => {
      const canvasContainer = chartRef.current;
      const originalOverflow = canvasContainer.style.overflow;
      const originalHeight = canvasContainer.style.height;

      canvasContainer.style.overflow = 'visible';
      canvasContainer.style.height = 'auto';

      await new Promise(resolve => setTimeout(resolve, 500));

      const canvas = await html2canvas(canvasContainer, {
        scrollY: -window.scrollY,
        useCORS: true,
        scale: 2,
        logging: false,
        allowTaint: true
      });

      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('l', 'mm', 'a4');
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = (canvas.height * pdfWidth) / canvas.width;

      pdf.setFontSize(16);
      pdf.setTextColor(40);
      pdf.text('Self Interested Candidates', pdfWidth / 2, 15, { align: "center" });

      pdf.addImage(imgData, 'PNG', 0, 20, pdfWidth, pdfHeight - 20);

      const dateStr = new Date().toLocaleDateString();
      pdf.setFontSize(10);
      pdf.setTextColor(150);
      pdf.text(`Exported on ${dateStr}`, pdfWidth - 15, pdf.internal.pageSize.getHeight() - 10, {
        align: "right"
      });

      pdf.save('SelfInterestChart.pdf');

      canvasContainer.style.overflow = originalOverflow;
      canvasContainer.style.height = originalHeight;
    }
  }));

  const generateTealColors = (count) => {
    return Array.from({ length: count }, (_, i) =>
      `hsl(${180 + (i * 25) % 90}, 75%, ${50 + (i % 4) * 8}%)`
    );
  };

  const { chartData, options, totalScore } = useMemo(() => {
    const interestedData = data
      .filter(item => item['Self-Interested Candidate']?.toString().toLowerCase() === 'yes')
      .sort((a, b) => b['Overall Percentage'] - a['Overall Percentage']);

    const totalScore = interestedData.reduce((sum, item) => sum + (item['Overall Percentage'] || 0), 0);

    const isFewData = interestedData.length <= 5;
    const barThickness = isFewData ? 30 : 'flex';

    const chartData = {
      labels: interestedData.map(item => item.Name),
      datasets: [
        {
          label: 'Score (%)',
          data: interestedData.map(item => item['Overall Percentage']),
          backgroundColor: generateTealColors(interestedData.length),
          borderColor: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.2)' : 'rgba(0,0,0,0.1)',
          borderWidth: 1,
          borderRadius: 12,
          barThickness,
          hoverBorderWidth: 2,
          hoverBorderColor: theme.palette.warning.light,
        }
      ]
    };

    const options = {
      indexAxis: 'x',
      responsive: true,
      maintainAspectRatio: false,
      layout: { padding: 20 },
      animation: { duration: 1200, easing: 'easeOutBack' },
      plugins: {
        legend: { display: false },
        datalabels: {
          anchor: 'end',
          align: 'end',
          color: theme.palette.text.primary,
          font: { size: 12, weight: 'bold', family: "'Montserrat', sans-serif" },
          formatter: value => `${value}%`,
        },
        tooltip: {
          backgroundColor: theme.palette.background.paper,
          titleColor: theme.palette.warning.main,
          bodyColor: theme.palette.text.primary,
          borderColor: theme.palette.divider,
          borderWidth: 1,
          padding: 12,
          cornerRadius: 10,
          titleFont: { size: 14, weight: 'bold' },
          bodyFont: { size: 12 },
          callbacks: {
            label: context => {
              const item = interestedData[context.dataIndex];
              return [
                `Score: ${context.raw}%`,
                `Status: ${item.Status}`,
                `Course: ${item.Course}`,
                `Manager: ${item.Manager || 'N/A'}`,
                `Self-Interested: Yes`
              ];
            }
          }
        }
      },
      scales: {
        x: {
          grid: { display: false },
          ticks: {
            color: theme.palette.text.primary,
            font: { size: 12, weight: 'bold', family: "'Montserrat', sans-serif" }
          },
          title: {
            display: true,
            text: 'Candidates',
            color: theme.palette.primary.main,
            font: { size: 14, weight: 'bold' }
          }
        },
        y: {
          beginAtZero: true,
          suggestedMax: 100,
          grid: {
            color: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.05)',
            drawBorder: false
          },
          ticks: {
            color: theme.palette.text.secondary,
            font: { size: 12, weight: 'bold' }
          },
          title: {
            display: true,
            text: 'Score (%)',
            color: theme.palette.primary.main,
            font: { size: 14, weight: 'bold' }
          }
        }
      }
    };

    return { chartData, options, totalScore };
  }, [data, theme]);

  return (
    <Box 
      ref={chartRef} 
      data-pdf-export
      sx={{ 
        width: '100%',
        height: 'calc(100vh - 180px)',
        p: 2,
        background: theme.palette.mode === 'dark'
          ? 'linear-gradient(135deg, #1a1a2e, #16213e)'
          : 'linear-gradient(135deg, #f5f7fa, #e4e8f0)',
        borderRadius: 3,
        boxShadow: theme.shadows[3],
        overflow: 'hidden'
      }}
    >
      <Box sx={{ 
        width: '100%',
        height: '100%',
        overflow: 'auto',
        '&::-webkit-scrollbar': {
          width: 10,
          height: 10
        },
        '&::-webkit-scrollbar-thumb': {
          background: theme.palette.mode === 'dark'
            ? 'linear-gradient(135deg, #4a6fa5, #166d67)'
            : 'linear-gradient(135deg, #1976d2, #0288d1)',
          borderRadius: 10,
          border: theme.palette.mode === 'dark'
            ? '1px solid rgba(255,255,255,0.1)'
            : '1px solid rgba(255,255,255,0.3)'
        },
        '&::-webkit-scrollbar-track': {
          background: theme.palette.mode === 'dark'
            ? 'rgba(255,255,255,0.05)'
            : 'rgba(0,0,0,0.05)',
          borderRadius: 10
        },
        '&::-webkit-scrollbar-corner': {
          background: 'transparent'
        }
      }}>
        <Box sx={{ 
          minWidth: 'fit-content',
          minHeight: 'fit-content',
          padding: 1
        }}>
          <Bar 
            data={chartData} 
            options={options} 
            style={{ 
              minWidth: Math.max(chartData.labels.length * 100, 800),
              minHeight: 500 
            }}
          />
        </Box>
      </Box>
      <Box sx={{ 
        mt: 2, 
        textAlign: 'right', 
        fontWeight: 'bold',
        color: theme.palette.text.primary,
        fontFamily: "'Montserrat', sans-serif"
      }}>
        Total Combined Score: {totalScore.toFixed(2)}%
      </Box>
    </Box>
  );
});

export default SelfInterestChart;


