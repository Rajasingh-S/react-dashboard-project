### D:\ICANIO intern\React\dashboard-project\src\components\Charts\AbsenteeHeatmap.jsx
import { Bar } from 'react-chartjs-2';
import { Box, Typography, useTheme } from '@mui/material';
import { motion } from 'framer-motion';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import ChartDataLabels from 'chartjs-plugin-datalabels';

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ChartDataLabels);

const AbsenteeHeatmap = ({ data }) => {
  const theme = useTheme();

  const absenteeData = data.reduce((acc, item) => {
    const manager = item.Manager?.trim() || 'Unknown';
    const isAbsent = item['Attendance Status (Present?)']?.toString().toLowerCase() === 'no';

    if (!acc[manager]) acc[manager] = { count: 0, total: 0 };
    acc[manager].total++;
    if (isAbsent) acc[manager].count++;
    return acc;
  }, {});

  const sortedManagers = Object.keys(absenteeData).sort(
    (a, b) => absenteeData[b].count - absenteeData[a].count
  );

  const generateBlueColors = (count) => {
    return Array.from({ length: count }, (_, i) => 
      `hsl(${200 + (i * 30) % 60}, 70%, ${50 + (i % 3) * 10}%)`
    );
  };

  const chartData = {
    labels: sortedManagers,
    datasets: [{
      label: 'Absentees',
      data: sortedManagers.map(manager => absenteeData[manager].count),
      backgroundColor: generateBlueColors(sortedManagers.length),
      borderRadius: 10,
      barThickness: 40,
      hoverBorderWidth: 3,
      hoverBorderColor: theme.palette.error.light,
    }]
  };

  const options = {
    responsive: true,
    maintainAspectRatio: false,
    indexAxis: 'x',
    animation: {
      duration: 1500,
      easing: 'easeOutElastic'
    },
    layout: {
      padding: { top: 30, right: 30, bottom: 40, left: 20 }
    },
    plugins: {
      legend: { display: false },
      datalabels: {
        color: theme.palette.text.primary,
        font: {
          weight: 'bold',
          size: 14,
          family: "'Montserrat', sans-serif",
        },
        anchor: 'end',
        align: 'end',
        formatter: (value) => `${value}`,
      },
      tooltip: {
        backgroundColor: theme.palette.background.default,
        titleColor: theme.palette.error.light,
        bodyColor: theme.palette.text.primary,
        borderColor: theme.palette.divider,
        borderWidth: 1,
        cornerRadius: 12,
        titleFont: { size: 16, weight: 'bold', family: "'Montserrat', sans-serif" },
        bodyFont: { size: 14, family: "'Montserrat', sans-serif" },
        callbacks: {
          title: (context) => `Manager: ${context[0].label}`,
          label: (context) => {
            const mgr = absenteeData[context.label];
            const absent = mgr.count;
            const present = mgr.total - absent;
            const percentage = Math.round((absent / mgr.total) * 100);
            return [
              `Absent: ${absent}`,
              `Present: ${present}`,
              `Total: ${mgr.total}`,
              `Absentee Rate: ${percentage}%`
            ];
          },
        },
        displayColors: false,
      }
    },
    scales: {
      x: {
        grid: { display: false, drawBorder: false },
        ticks: {
          color: theme.palette.text.primary,
          font: { size: 13, weight: 'bold', family: "'Montserrat', sans-serif" },
          padding: 10,
        },
        title: {
          display: true,
          text: 'Managers',
          color: theme.palette.primary.main,
          font: { size: 16, weight: 'bold', family: "'Montserrat', sans-serif" },
          padding: { top: 20 },
        }
      },
      y: {
        beginAtZero: true,
        grid: {
          color: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.05)' : 'rgba(0,0,0,0.05)',
          drawBorder: false
        },
        ticks: {
          color: theme.palette.text.secondary,
          font: { size: 13, family: "'Montserrat', sans-serif" },
          precision: 0,
          padding: 10,
        },
        title: {
          display: true,
          text: 'Number of Absentees',
          color: theme.palette.primary.main,
          font: { size: 16, weight: 'bold', family: "'Montserrat', sans-serif" },
          padding: { bottom: 20 },
        }
      }
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.6, delay: 0.2 }}
    >
      <Box sx={{
        width: '100%',
        height: 'calc(100vh - 180px)',
        background: theme.palette.mode === 'dark'
          ? 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)'
          : 'linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%)',
        borderRadius: 3,
        boxShadow: theme.shadows[10],
        p: 3,
        overflow: 'hidden',
        border: theme.palette.mode === 'dark'
          ? '1px solid rgba(255,255,255,0.1)'
          : '1px solid rgba(0,0,0,0.1)'
      }}>
        <Box data-export-container sx={{
          height: '100%',
          overflow: 'auto',
          '&::-webkit-scrollbar': { 
            width: 10,
            height: 10
          },
          '&::-webkit-scrollbar-thumb': {
            background: theme.palette.mode === 'dark'
              ? 'linear-gradient(135deg, #4a6fa5, #166d67)'
              : 'linear-gradient(135deg, #1976d2, #0288d1)',
            borderRadius: 4,
            border: theme.palette.mode === 'dark'
              ? '1px solid rgba(255,255,255,0.1)'
              : '1px solid rgba(255,255,255,0.3)'
          },
          '&::-webkit-scrollbar-track': {
            background: theme.palette.mode === 'dark'
              ? 'rgba(255,255,255,0.05)'
              : 'rgba(0,0,0,0.05)',
            borderRadius: 4
          },
          '&::-webkit-scrollbar-corner': {
            background: 'transparent'
          }
        }}>
          <Box sx={{ 
            minWidth: 'fit-content',
            minHeight: 'fit-content',
            padding: 1
          }}>
            <Bar 
              data={chartData} 
              options={options} 
              style={{ 
                minWidth: Math.max(sortedManagers.length * 100, 800),
                minHeight: 500 
              }} 
            />
          </Box>
        </Box>
        <motion.div
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ delay: 0.4 }}
        >
          <Typography
            align="right"
            sx={{
              mt: 2,
              fontWeight: 'bold',
              background: theme.palette.mode === 'dark'
                ? 'linear-gradient(90deg, #4a6fa5, #166d67)'
                : 'linear-gradient(90deg, #1976d2, #0288d1)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              fontSize: 16
            }}
          >
            Total Managers: {sortedManagers.length}
          </Typography>
        </motion.div>
      </Box>
    </motion.div>
  );
};

export default AbsenteeHeatmap;


### D:\ICANIO intern\React\dashboard-project\src\components\Charts\AttendanceChart.jsx
import { Bar } from 'react-chartjs-2';
import { Box, useTheme } from '@mui/material';
import { motion } from 'framer-motion';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import { useMemo } from 'react';

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const AttendanceChart = ({ data = [] }) => {
  const theme = useTheme();

  const { chartData, chartOptions, maxPresent, attendanceSummary } = useMemo(() => {
    const summary = data.reduce((acc, { Manager = 'Unknown', 'Attendance Status (Present?)': status }) => {
      const manager = Manager.trim() || 'Unknown';
      const isPresent = status?.toString().toLowerCase() === 'yes';
      if (!acc[manager]) acc[manager] = { present: 0, total: 0 };
      acc[manager].total++;
      if (isPresent) acc[manager].present++;
      return acc;
    }, {});

    const sortedManagers = Object.keys(summary).sort(
      (a, b) => summary[b].present - summary[a].present
    );

    const maxPresent = Math.max(...sortedManagers.map(mgr => summary[mgr].present));

    const generateBlueColors = (count) => {
      return Array.from({ length: count }, (_, i) => 
        `hsl(${200 + (i * 20) % 80}, 80%, ${50 + (i % 4) * 7}%)`
      );
    };

    const chartData = {
      labels: sortedManagers,
      datasets: [{
        label: 'Number of Present Employees',
        data: sortedManagers.map(mgr => summary[mgr].present),
        backgroundColor: generateBlueColors(sortedManagers.length),
        borderColor: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.2)' : 'rgba(0,0,0,0.1)',
        borderWidth: 1,
        borderRadius: 8,
        barThickness: 40,
        hoverBorderWidth: 3,
        hoverBorderColor: theme.palette.success.light,
      }]
    };

    const chartOptions = {
      responsive: true,
      maintainAspectRatio: false,
      indexAxis: 'x',
      layout: {
        padding: { top: 30, right: 40, bottom: 50, left: 30 }
      },
      animation: {
        duration: 1500,
        easing: 'backOut',
        delay: ctx => ctx.dataIndex * 70
      },
      plugins: {
        legend: { display: false },
        tooltip: {
          backgroundColor: theme.palette.background.default,
          titleColor: theme.palette.success.light,
          bodyColor: theme.palette.text.primary,
          borderColor: theme.palette.divider,
          borderWidth: 2,
          padding: 16,
          cornerRadius: 12,
          callbacks: {
            title: (context) => [`Manager: ${context[0].label}`],
            label: (context) => {
              const mgrData = summary[context.label];
              const percent = Math.round((mgrData.present / mgrData.total) * 100);
              return [
                `Present: ${context.raw}`,
                `Absent: ${mgrData.total - mgrData.present}`,
                `Total: ${mgrData.total}`,
                `Attendance Rate: ${percent}%`
              ];
            },
            footer: () => ['Click for employee details']
          },
          displayColors: false,
        },
      },
      scales: {
        x: {
          grid: { display: false },
          ticks: {
            color: theme.palette.text.primary,
            font: { family: "'Montserrat', sans-serif", size: 13, weight: 'bold' },
            padding: 10
          },
          title: {
            display: true,
            text: 'Managers',
            font: { size: 16, weight: 'bold', family: "'Montserrat', sans-serif" },
            color: theme.palette.primary.light,
            padding: { top: 20 }
          }
        },
        y: {
          beginAtZero: true,
          max: Math.ceil(maxPresent * 1.2),
          grid: {
            color: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.05)' : 'rgba(0,0,0,0.05)',
          },
          ticks: {
            color: theme.palette.text.secondary,
            font: { family: "'Montserrat', sans-serif", size: 13 },
            padding: 10
          },
          title: {
            display: true,
            text: 'No. of Employees Present',
            font: { size: 16, weight: 'bold', family: "'Montserrat', sans-serif" },
            color: theme.palette.primary.light,
            padding: { bottom: 20 }
          }
        }
      },
      onHover: (event, chartElement) => {
        event.native.target.style.cursor = chartElement.length ? 'pointer' : 'default';
      }
    };

    return { chartData, chartOptions, maxPresent, attendanceSummary: summary };
  }, [data, theme]);

  const valueLabelPlugin = {
    id: 'valueLabels',
    afterDatasetsDraw(chart) {
      const { ctx, data } = chart;
      ctx.save();
      ctx.font = `bold 14px 'Montserrat', sans-serif`;
      ctx.textAlign = 'center';
      ctx.textBaseline = 'bottom';

      chart.getDatasetMeta(0).data.forEach((bar, index) => {
        const value = data.datasets[0].data[index];
        const { x, y } = bar.tooltipPosition();
        ctx.fillStyle = theme.palette.background.paper;
        ctx.shadowColor = 'rgba(0,0,0,0.2)';
        ctx.shadowBlur = 8;
        ctx.fillRect(x - 22, y - 24, 44, 24);

        ctx.shadowColor = 'transparent';
        ctx.fillStyle = theme.palette.text.primary;
        ctx.fillText(value, x, y - 6);
      });

      ctx.restore();
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.6 }}
    >
      <Box
        sx={{
          width: '100%',
          height: 'calc(100vh - 180px)',
          borderRadius: '18px',
          background: theme.palette.mode === 'dark'
            ? 'linear-gradient(135deg, #1a1a2e, #16213e)'
            : 'linear-gradient(135deg, #f5f7fa, #e4e8f0)',
          boxShadow: theme.shadows[10],
          p: 4,
          overflow: 'hidden',
          border: theme.palette.mode === 'dark'
            ? '1px solid rgba(255,255,255,0.1)'
            : '1px solid rgba(0,0,0,0.1)'
        }}
      >
        <Box data-export-container sx={{
          width: '100%',
          height: '100%',
          overflow: 'auto',
          '&::-webkit-scrollbar': { 
            width: 10,
            height: 10
          },
          '&::-webkit-scrollbar-thumb': {
            background: theme.palette.mode === 'dark'
              ? 'linear-gradient(135deg, #4a6fa5, #166d67)'
              : 'linear-gradient(135deg, #1976d2, #0288d1)',
            borderRadius: 10,
            border: theme.palette.mode === 'dark'
              ? '1px solid rgba(255,255,255,0.1)'
              : '1px solid rgba(255,255,255,0.3)'
          },
          '&::-webkit-scrollbar-track': {
            background: theme.palette.mode === 'dark'
              ? 'rgba(255,255,255,0.05)'
              : 'rgba(0,0,0,0.05)',
            borderRadius: 10
          },
          '&::-webkit-scrollbar-corner': {
            background: 'transparent'
          }
        }}>
          <Box sx={{ 
            minWidth: 'fit-content',
            minHeight: 'fit-content',
            padding: 1
          }}>
            <Bar 
              data={chartData} 
              options={chartOptions} 
              plugins={[valueLabelPlugin]}
              style={{ 
                minWidth: Math.max(chartData.labels.length * 100, 800),
                minHeight: 500 
              }}
            />
          </Box>
        </Box>
      </Box>
    </motion.div>
  );
};

export default AttendanceChart;


### D:\ICANIO intern\React\dashboard-project\src\components\Charts\chartUtils.js
import { schemeCategory10, schemePastel2, schemeSet3 } from 'd3-scale-chromatic';

export const generateUniqueColors = (count, alpha = 0.8) => {
  const colors = [];
  const schemes = [schemeCategory10, schemePastel2, schemeSet3];
  const schemeIndex = Math.floor(Math.random() * schemes.length);
  
  for (let i = 0; i < count; i++) {
    const hue = (i * 360 / count) % 360;
    const saturation = 70 + Math.random() * 20;
    const lightness = 50 + Math.random() * 10;
    colors.push(`hsla(${hue}, ${saturation}%, ${lightness}%, ${alpha})`);
  }
  return colors;
};

export const getInitials = (name) => {
  return name.split(' ').map(n => n[0]).join('');
};

export const getRandomColorFromScheme = (index) => {
  const schemes = [schemeCategory10, schemePastel2, schemeSet3];
  const schemeIndex = index % schemes.length;
  const colorIndex = Math.floor(index / schemes.length) % schemes[schemeIndex].length;
  return schemes[schemeIndex][colorIndex];
};

export const getColorForValue = (value, maxValue) => {
  const ratio = value / maxValue;
  const hue = (1 - ratio) * 120;
  return `hsl(${hue}, 70%, 50%)`;
};


### D:\ICANIO intern\React\dashboard-project\src\components\Charts\ChartView.jsx
import { useState, useRef, useMemo } from "react";
import {
  Box,
  Typography,
  Paper,
  Avatar,
  Button,
  useTheme,
  IconButton,
  styled,
  FormControl,
  Select,
  MenuItem,
  useMediaQuery,
} from "@mui/material";
import {
  FiDownload,
  FiPieChart,
  FiChevronLeft,
  FiChevronRight,
} from "react-icons/fi";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import ScoreChart from "./ScoreChart";
import SelfInterestChart from "./SelfInterestChart";
import AbsenteeHeatmap from "./AbsenteeHeatmap";
import AttendanceChart from "./AttendanceChart";
import IntegrityTable from "./IntegrityTable";

const ChartContainer = styled(Paper)(({ theme }) => ({
  width: "100%",
  height: "calc(100vh - 180px)",
  overflow: "hidden",
  position: "relative",
  borderRadius: theme.shape.borderRadius,
  boxShadow: theme.shadows[2],
  backgroundColor: theme.palette.background.paper,
}));

const ChartWrapper = styled(Box)({
  width: "100%",
  height: "100%",
  display: "flex",
  transition: "transform 0.3s ease",
});

const ChartView = ({ data, onToggleView }) => {
  const theme = useTheme();
  const isMobile = useMediaQuery("(max-width:600px)");
  const isTablet = useMediaQuery("(max-width:900px)");
  const [currentChart, setCurrentChart] = useState(0);
  const [selectedManager, setSelectedManager] = useState("All Managers");
  const chartWrapperRef = useRef(null);
  const chartRefs = useRef([]);

  const managers = useMemo(() => {
    const managerSet = new Set();
    data.forEach((item) => {
      const manager = item.Manager?.trim() || "Unknown";
      managerSet.add(manager);
    });
    return ["All Managers", ...Array.from(managerSet).sort()];
  }, [data]);

  const filteredData = useMemo(() => {
    if (selectedManager === "All Managers") return data;
    return data.filter((item) => {
      const manager = item.Manager?.trim() || "Unknown";
      return manager === selectedManager;
    });
  }, [data, selectedManager]);

  const charts = [
    { title: "Overall Score Distribution", component: <ScoreChart data={filteredData} /> },
    { title: "Self Interested Candidates", component: <SelfInterestChart data={filteredData} /> },
    { title: "Absentee Analysis by Manager", component: <AbsenteeHeatmap data={filteredData} /> },
    { title: "Attendance by Manager", component: <AttendanceChart data={filteredData} /> },
    { title: "Integrity Scores", component: <IntegrityTable data={filteredData} /> },
  ];

  const handleDownloadPDF = async () => {
    try {
      const chartWrapper = chartRefs.current[currentChart];
      if (!chartWrapper) return console.error("Chart wrapper not found.");

      // Special handling for IntegrityTable (index 4)
      if (currentChart === 4) {
        const container = chartWrapper.querySelector('[data-export-container]');
        if (!container) return;

        const originalStyles = {
          overflow: container.style.overflow,
          height: container.style.height,
          position: container.style.position
        };

        // Force show all content
        container.style.overflow = 'visible';
        container.style.height = 'auto';
        container.style.position = 'relative';

        await new Promise(resolve => setTimeout(resolve, 500));

        const canvas = await html2canvas(container, {
          scrollY: -window.scrollY,
          useCORS: true,
          scale: 2,
          logging: false,
          allowTaint: true,
          width: container.scrollWidth,
          height: container.scrollHeight,
          windowWidth: container.scrollWidth,
          windowHeight: container.scrollHeight
        });

        const pdf = new jsPDF('l', 'mm', [
          canvas.width * 0.264583, 
          canvas.height * 0.264583
        ]);

        pdf.addImage(canvas, 'PNG', 0, 0, 
          pdf.internal.pageSize.getWidth(), 
          pdf.internal.pageSize.getHeight()
        );

        // Restore original styles
        container.style.overflow = originalStyles.overflow;
        container.style.height = originalStyles.height;
        container.style.position = originalStyles.position;

        pdf.save('Integrity-Table.pdf');
        return;
      }

      // Default handling for other charts
      const scrollContainer = chartWrapper.querySelector('[data-export-container]') || chartWrapper;
      
      const originalOverflow = scrollContainer.style.overflow;
      const originalHeight = scrollContainer.style.height;
      
      scrollContainer.style.overflow = 'visible';
      scrollContainer.style.height = 'auto';

      await new Promise(resolve => setTimeout(resolve, 300));

      const canvas = await html2canvas(scrollContainer, {
        scrollX: -window.scrollX,
        scrollY: -window.scrollY,
        useCORS: true,
        scale: 2,
        logging: false,
        allowTaint: true
      });

      const imgData = canvas.toDataURL('image/png', 1.0);
      const pdf = new jsPDF({
        orientation: currentChart === 0 ? 'portrait' : 'landscape',
        unit: 'mm'
      });

      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = (canvas.height * pdfWidth) / canvas.width;

      pdf.setFontSize(16);
      pdf.setTextColor(40);
      pdf.text(charts[currentChart].title, pdfWidth / 2, 15, { align: "center" });

      pdf.addImage(imgData, 'PNG', 0, 20, pdfWidth, pdfHeight - 20);

      const dateStr = new Date().toLocaleDateString();
      pdf.setFontSize(10);
      pdf.setTextColor(150);
      pdf.text(`Exported on ${dateStr}`, pdfWidth - 15, pdf.internal.pageSize.getHeight() - 10, {
        align: "right"
      });

      const filename = charts[currentChart].title.replace(/[/\\?%*:|"<>]/g, "-");
      pdf.save(`${filename}.pdf`);

      scrollContainer.style.overflow = originalOverflow;
      scrollContainer.style.height = originalHeight;
    } catch (err) {
      console.error("PDF export failed:", err);
    }
  };

  const navigateChart = (direction) => {
    const newIndex =
      direction === "next"
        ? (currentChart + 1) % charts.length
        : (currentChart - 1 + charts.length) % charts.length;
    setCurrentChart(newIndex);
    if (chartWrapperRef.current) {
      chartWrapperRef.current.style.transform = `translateX(-${newIndex * 100}%)`;
    }
  };

  return (
    <Box sx={{ p: 3, height: "100vh", overflow: "hidden" }}>
      <Box
        sx={{
          display: "flex",
          flexDirection: isMobile ? "column" : "row",
          justifyContent: "space-between",
          alignItems: isMobile ? "flex-start" : "center",
          mb: 3,
          gap: 2,
        }}
      >
        <Box
          sx={{
            display: "flex",
            alignItems: "center",
            width: isMobile ? "100%" : "auto",
            minWidth: isTablet ? "200px" : "300px",
          }}
        >
          <Avatar sx={{ bgcolor: "primary.main", width: 48, height: 48, mr: 2 }}>
            <FiPieChart />
          </Avatar>
          <Typography
            variant={isMobile ? "h6" : "h5"}
            sx={{
              fontWeight: 700,
              whiteSpace: "nowrap",
              overflow: "hidden",
              textOverflow: "ellipsis",
            }}
          >
            {charts[currentChart].title}
          </Typography>
        </Box>

        <Box
          sx={{
            display: "flex",
            flexDirection: isMobile ? "column" : "row",
            gap: 2,
            width: isMobile ? "100%" : "auto",
          }}
        >
          <Button
            variant="outlined"
            onClick={onToggleView}
            sx={{
              height: 36,
              minWidth: isMobile ? "50%" : 120,
              textTransform: "none",
              fontWeight: "bold",
              color: "#1976d2",
              borderColor: "#1976d2",
              backgroundColor: "#ffffff",
              '&:hover': {
                backgroundColor: "#1976d2",
                color: "#ffffff",
                boxShadow: "0 4px 12px rgba(25, 118, 210, 0.2)",
              },
            }}
          >
            Back to Table
          </Button>
          <FormControl size="small" sx={{ minWidth: isMobile ? "100%" : 180 }}>
            <Select
              value={selectedManager}
              onChange={(e) => setSelectedManager(e.target.value)}
              sx={{
                height: 36,
                backgroundColor: theme.palette.primary.main,
                color: theme.palette.primary.contrastText,
              }}
            >
              {managers.map((manager) => (
                <MenuItem key={manager} value={manager}>
                  {manager}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          <Button
            variant="contained"
            startIcon={<FiDownload />}
            onClick={handleDownloadPDF}
            sx={{ height: 36, minWidth: isMobile ? "50%" : 120, textTransform: "none" }}
          >
            Export PDF
          </Button>
        </Box>
      </Box>

      <Box sx={{ position: "relative" }}>
        <ChartContainer>
          <ChartWrapper ref={chartWrapperRef}>
            {charts.map((chart, index) => (
              <Box
                key={index}
                ref={(el) => (chartRefs.current[index] = el)}
                sx={{ minWidth: "100%", height: "100%", p: 2 }}
              >
                {chart.component}
              </Box>
            ))}
          </ChartWrapper>
        </ChartContainer>

        <IconButton
          onClick={() => navigateChart("prev")}
          sx={{
            position: "absolute",
            top: "50%",
            left: 10,
            transform: "translateY(-50%)",
          }}
        >
          <FiChevronLeft />
        </IconButton>
        <IconButton
          onClick={() => navigateChart("next")}
          sx={{
            position: "absolute",
            top: "50%",
            right: 10,
            transform: "translateY(-50%)",
          }}
        >
          <FiChevronRight />
        </IconButton>
      </Box>
    </Box>
  );
};

export default ChartView;


### D:\ICANIO intern\React\dashboard-project\src\components\Charts\IntegrityTable.jsx
import { 
  Box,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Typography,
  TableSortLabel,
  Tooltip,
  useTheme,
  Avatar
} from '@mui/material';
import { motion } from 'framer-motion';
import { useState, forwardRef, useRef, useEffect } from 'react';
import { getInitials } from './chartUtils';

const IntegrityTable = forwardRef(({ data }, ref) => {
  const theme = useTheme();
  const [order, setOrder] = useState('desc');
  const [orderBy, setOrderBy] = useState('Integrity Score (out of 10)');
  const containerRef = useRef(null);
  const tableRef = useRef(null);

  useEffect(() => {
    if (containerRef.current && tableRef.current) {
      containerRef.current.scrollTop = 0;
    }
  }, [data]);

  const handleSort = (property) => {
    const isAsc = orderBy === property && order === 'asc';
    setOrder(isAsc ? 'desc' : 'asc');
    setOrderBy(property);
  };

  const sortedData = [...data].sort((a, b) => {
    const aValue = a[orderBy] || 0;
    const bValue = b[orderBy] || 0;
    return order === 'asc' ? aValue - bValue : bValue - aValue;
  });

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.6, delay: 0.3 }}
    >
      <Paper
        ref={ref}
        data-export-container
        elevation={3}
        sx={{
          p: 4,
          borderRadius: '18px',
          background: theme.palette.mode === 'dark' 
            ? 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)' 
            : 'linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%)',
          boxShadow: theme.shadows[10],
          border: theme.palette.mode === 'dark' 
            ? '1px solid rgba(255,255,255,0.1)' 
            : '1px solid rgba(0,0,0,0.1)',
          display: 'flex',
          flexDirection: 'column',
          width: '100%',
          height: 'calc(100vh - 180px)',
          overflow: 'hidden'
        }}
      >
        <Typography 
          variant="h6" 
          sx={{ 
            mb: 3, 
            fontWeight: 700, 
            color: theme.palette.text.primary,
            fontSize: '1.5rem',
            background: theme.palette.mode === 'dark' 
              ? 'linear-gradient(90deg, #4a6fa5, #166d67)' 
              : 'linear-gradient(90deg, #1976d2, #0288d1)',
            WebkitBackgroundClip: 'text',
            WebkitTextFillColor: 'transparent'
          }}
        >
          Integrity Scores Overview
        </Typography>

        <Box
          ref={containerRef}
          sx={{
            flex: 1,
            width: '100%',
            overflow: 'auto',
            '&::-webkit-scrollbar': {
              width: 10,
              height: 10,
            },
            '&::-webkit-scrollbar-thumb': {
              backgroundColor: theme.palette.primary.main,
              borderRadius: 4,
              border: `1px solid ${theme.palette.primary.contrastText}`
            },
            '&::-webkit-scrollbar-track': {
              backgroundColor: theme.palette.mode === 'dark'
                ? 'rgba(255,255,255,0.05)'
                : 'rgba(0,0,0,0.05)',
              borderRadius: 4
            },
            '&::-webkit-scrollbar-corner': {
              background: 'transparent'
            }
          }}
        >
          <Table 
            ref={tableRef}
            stickyHeader 
            size="small" 
            aria-label="integrity table"
            sx={{
              minWidth: 'max-content',
              width: '100%',
              tableLayout: 'fixed',
              background: theme.palette.background.paper
            }}
          >
            <TableHead>
              <TableRow>
                <TableCell
                  sx={{
                    position: 'sticky',
                    top: 0,
                    backgroundColor: theme.palette.mode === 'dark' 
                      ? 'rgba(26, 32, 53, 0.9)' 
                      : 'rgba(245, 247, 250, 0.9)',
                    color: theme.palette.text.primary,
                    fontWeight: 'bold',
                    fontSize: '15px',
                    fontFamily: "'Montserrat', sans-serif",
                    borderBottom: 'none',
                    zIndex: 2,
                    minWidth: 300,
                    width: 300
                  }}
                >
                  Candidate
                </TableCell>
                {['Integrity Score (out of 10)', 'Time Spent Offtab (in secs)'].map((column) => (
                  <TableCell
                    key={column}
                    align="right"
                    sx={{
                      position: 'sticky',
                      top: 0,
                      backgroundColor: theme.palette.mode === 'dark' 
                        ? 'rgba(26, 32, 53, 0.9)' 
                        : 'rgba(245, 247, 250, 0.9)',
                      color: theme.palette.text.primary,
                      fontWeight: 'bold',
                      fontSize: '15px',
                      fontFamily: "'Montserrat', sans-serif",
                      borderBottom: 'none',
                      zIndex: 2,
                      minWidth: 200,
                      width: 200
                    }}
                  >
                    <TableSortLabel
                      active={orderBy === column}
                      direction={orderBy === column ? order : 'asc'}
                      onClick={() => handleSort(column)}
                      sx={{
                        color: theme.palette.text.primary + '!important',
                        '& .MuiTableSortLabel-icon': {
                          color: theme.palette.text.primary + '!important'
                        }
                      }}
                    >
                      {column === 'Time Spent Offtab (in secs)' ? (
                        <Tooltip title="Time spent away from assessment">
                          <span>Off-task Time</span>
                        </Tooltip>
                      ) : (
                        'Integrity Score'
                      )}
                    </TableSortLabel>
                  </TableCell>
                ))}
              </TableRow>
            </TableHead>
            <TableBody>
              {sortedData.map((row, index) => (
                <motion.tr
                  key={index}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.05 }}
                >
                  <TableCell 
                    sx={{ 
                      display: 'flex', 
                      alignItems: 'center',
                      borderBottom: theme.palette.mode === 'dark' 
                        ? '1px solid rgba(255,255,255,0.05)' 
                        : '1px solid rgba(0,0,0,0.05)',
                      backgroundColor: index % 2 === 0
                        ? theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.02)' : 'rgba(0,0,0,0.02)'
                        : 'transparent',
                      minWidth: 300,
                      width: 300
                    }}
                  >
                    <Avatar
                      sx={{
                        width: 32,
                        height: 32,
                        mr: 2,
                        bgcolor: `hsl(${180 + (index * 137.5) % 60}, 70%, ${
                          theme.palette.mode === 'dark' ? '40%' : '70%'
                        })`,
                        color: theme.palette.getContrastText(
                          `hsl(${180 + (index * 137.5) % 60}, 70%, ${
                            theme.palette.mode === 'dark' ? '40%' : '70%'
                          })`
                        ),
                        fontSize: '0.8rem',
                        fontWeight: 'bold'
                      }}
                    >
                      {getInitials(row.Name)}
                    </Avatar>
                    <Typography variant="body2" fontWeight={600}>
                      {row.Name}
                    </Typography>
                  </TableCell>
                  <TableCell 
                    align="right"
                    sx={{
                      borderBottom: theme.palette.mode === 'dark' 
                        ? '1px solid rgba(255,255,255,0.05)' 
                        : '1px solid rgba(0,0,0,0.05)',
                      backgroundColor: index % 2 === 0
                        ? theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.02)' : 'rgba(0,0,0,0.02)'
                        : 'transparent',
                      minWidth: 200,
                      width: 200
                    }}
                  >
                    <Box
                      sx={{
                        display: 'inline-flex',
                        alignItems: 'center',
                        px: 2,
                        py: 1,
                        borderRadius: '16px',
                        fontSize: '14px',
                        fontWeight: 600,
                        fontFamily: "'Montserrat', sans-serif",
                        boxShadow: theme.shadows[1],
                        backgroundColor:
                          row['Integrity Score (out of 10)'] >= 8
                            ? theme.palette.mode === 'dark' 
                              ? 'rgba(46, 125, 50, 0.3)' 
                              : 'rgba(46, 125, 50, 0.15)'
                            : row['Integrity Score (out of 10)'] >= 5
                              ? theme.palette.mode === 'dark' 
                                ? 'rgba(237, 108, 2, 0.3)' 
                                : 'rgba(237, 108, 2, 0.15)'
                              : theme.palette.mode === 'dark' 
                                ? 'rgba(211, 47, 47, 0.3)' 
                                : 'rgba(211, 47, 47, 0.15)',
                        color:
                          row['Integrity Score (out of 10)'] >= 8
                            ? theme.palette.success.light
                            : row['Integrity Score (out of 10)'] >= 5
                              ? theme.palette.warning.light
                              : theme.palette.error.light,
                      }}
                    >
                      {row['Integrity Score (out of 10)']}/10
                    </Box>
                  </TableCell>
                  <TableCell 
                    align="right"
                    sx={{
                      borderBottom: theme.palette.mode === 'dark' 
                        ? '1px solid rgba(255,255,255,0.05)' 
                        : '1px solid rgba(0,0,0,0.05)',
                      backgroundColor: index % 2 === 0
                        ? theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.02)' : 'rgba(0,0,0,0.02)'
                        : 'transparent',
                      minWidth: 200,
                      width: 200
                    }}
                  >
                    <Box
                      sx={{
                        display: 'inline-flex',
                        alignItems: 'center',
                        px: 2,
                        py: 1,
                        borderRadius: '16px',
                        fontSize: '14px',
                        fontWeight: 600,
                        fontFamily: "'Montserrat', sans-serif",
                        boxShadow: theme.shadows[1],
                        backgroundColor: row['Time Spent Offtab (in secs)'] > 0
                          ? theme.palette.mode === 'dark' 
                            ? 'rgba(211, 47, 47, 0.3)' 
                            : 'rgba(211, 47, 47, 0.15)'
                          : theme.palette.mode === 'dark' 
                            ? 'rgba(46, 125, 50, 0.3)' 
                            : 'rgba(46, 125, 50, 0.15)',
                        color: row['Time Spent Offtab (in secs)'] > 0
                          ? theme.palette.error.light
                          : theme.palette.success.light,
                      }}
                    >
                      {row['Time Spent Offtab (in secs)'] > 0
                        ? `${Math.floor(row['Time Spent Offtab (in secs)']/60)}m ${row['Time Spent Offtab (in secs)']%60}s`
                        : 'None'}
                    </Box>
                  </TableCell>
                </motion.tr>
              ))}
            </TableBody>
          </Table>
        </Box>

        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.5 }}
        >
          <Typography 
            variant="caption" 
            sx={{ 
              mt: 2, 
              textAlign: 'right', 
              color: theme.palette.text.secondary,
              fontFamily: "'Montserrat', sans-serif",
              fontWeight: 600
            }}
          >
            Showing {sortedData.length} records
          </Typography>
        </motion.div>
      </Paper>
    </motion.div>
  );
});

export default IntegrityTable;


### D:\ICANIO intern\React\dashboard-project\src\components\Charts\ScoreChart.jsx
import { Bar } from 'react-chartjs-2';
import { Box, useTheme, useMediaQuery } from '@mui/material';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import { motion } from 'framer-motion';
import { useEffect, useRef } from 'react';

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const ScoreChart = ({ data }) => {
  const theme = useTheme();
  const containerRef = useRef(null);
  const chartRef = useRef(null);

  const isMobile = useMediaQuery('(max-width:600px)');
  const isTablet = useMediaQuery('(max-width:900px)');

  const sortedData = [...data].sort((a, b) => b['Overall Percentage'] - a['Overall Percentage']);
  const barHeight = isMobile ? 16 : isTablet ? 20 : 24;
  const barSpacing = 5;
  const chartHeight = sortedData.length * (barHeight + barSpacing) + 80;
  const maxNameLength = Math.max(...sortedData.map(item => item.Name.length));
  const nameAreaWidth = Math.min(isMobile ? 150 : isTablet ? 200 : 300, maxNameLength * 8);

  useEffect(() => {
    if (containerRef.current && chartRef.current) {
      containerRef.current.scrollTop = containerRef.current.scrollHeight;
    }
  }, []);

  const generateBlueColors = (count) => {
    return Array.from({ length: count }, (_, i) =>
      `hsl(${190 + (i * 15) % 70}, 85%, ${50 + (i % 5) * 6}%)`
    );
  };

  const chartData = {
    labels: sortedData.map(item => item.Name),
    datasets: [{
      label: 'Score',
      data: sortedData.map(item => item['Overall Percentage']),
      backgroundColor: generateBlueColors(sortedData.length),
      borderColor: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.2)' : 'rgba(0,0,0,0.15)',
      borderWidth: 1,
      borderRadius: 6,
      barThickness: barHeight,
      hoverBorderWidth: 2,
      hoverBorderColor: theme.palette.primary.light,
    }]
  };

  const options = {
    indexAxis: 'y',
    responsive: true,
    maintainAspectRatio: false,
    animation: {
      duration: 500,
      easing: 'easeOutQuad',
    },
    layout: {
      padding: {
        left: nameAreaWidth + 10,
        right: 50,
        top: 20,
        bottom: 40
      }
    },
    plugins: {
      legend: { display: false },
      tooltip: { enabled: true },
    },
    scales: {
      x: {
        max: 100,
        min: 0,
        ticks: {
          callback: (value) => `${value}%`,
          font: {
            size: isMobile ? 10 : 13,
            weight: 'bold',
            family: "'Montserrat', sans-serif",
          }
        },
        title: {
          display: true,
          text: 'Score (%)',
          font: {
            size: isMobile ? 12 : 15,
            weight: 'bold',
            family: "'Montserrat', sans-serif",
          }
        },
        grid: {
          drawTicks: false,
          drawBorder: false,
        }
      },
      y: {
        display: false,
        grid: {
          display: false,
        },
        afterFit: (scale) => {
          scale.height = (barHeight + barSpacing) * sortedData.length - barSpacing;
        }
      }
    },
    onHover: (event, chartElement) => {
      event.native.target.style.cursor = chartElement.length ? 'pointer' : 'default';
    }
  };

  const externalLabelsPlugin = {
    id: 'externalLabels',
    afterDatasetsDraw(chart) {
      const { ctx, chartArea: { left }, scales: { y } } = chart;
      ctx.save();
      ctx.font = `bold ${isMobile ? 10 : 13}px 'Montserrat', sans-serif`;
      ctx.textBaseline = 'middle';

      chart.data.labels.forEach((label, index) => {
        const yPos = y.getPixelForValue(index);

        ctx.textAlign = 'right';
        ctx.fillStyle = theme.palette.text.primary;
        ctx.fillText(label, left - 10, yPos);

        const score = chart.data.datasets[0].data[index];
        const barEndX = chart.getDatasetMeta(0).data[index].x;
        ctx.textAlign = 'left';
        ctx.fillText(`${score}%`, barEndX + 8, yPos);
      });

      ctx.restore();
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.3 }}
    >
      <Box
        sx={{
          width: '100%',
          height: {
            xs: '70vh',
            sm: '75vh',
            md: '80vh'
          },
          background: theme.palette.background.default,
          borderRadius: 3,
          boxShadow: theme.shadows[3],
          padding: { xs: 2, sm: 3 },
          overflow: 'hidden',
          border: `1px solid ${theme.palette.divider}`,
          display: 'flex',
          flexDirection: 'column',
        }}
      >
        <Box
          ref={containerRef}
          data-export-container
          sx={{
            flex: 1,
            width: '100%',
            overflow: 'auto',
            '&::-webkit-scrollbar': {
              width: 10,
              height: 10,
            },
            '&::-webkit-scrollbar-thumb': {
              backgroundColor: theme.palette.primary.main,
              borderRadius: 4,
              border: `1px solid ${theme.palette.primary.contrastText}`
            },
            '&::-webkit-scrollbar-track': {
              backgroundColor: theme.palette.mode === 'dark'
                ? 'rgba(255,255,255,0.05)'
                : 'rgba(0,0,0,0.05)',
              borderRadius: 4
            },
            '&::-webkit-scrollbar-corner': {
              background: 'transparent'
            }
          }}
        >
          <Box
            sx={{
              minHeight: `${chartHeight}px`,
              minWidth: `${nameAreaWidth + 600}px`,
              position: 'relative',
              paddingBottom: '20px'
            }}
          >
            <Bar
              ref={chartRef}
              data={chartData}
              options={options}
              plugins={[externalLabelsPlugin]}
            />
          </Box>
        </Box>
      </Box>
    </motion.div>
  );
};

export default ScoreChart;


### D:\ICANIO intern\React\dashboard-project\src\components\Charts\SelfInterestChart.jsx
import { useRef, useImperativeHandle, forwardRef, useMemo } from 'react';
import { Bar } from 'react-chartjs-2';
import { Box, useTheme } from '@mui/material';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import ChartDataLabels from 'chartjs-plugin-datalabels';

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ChartDataLabels
);

const SelfInterestChart = forwardRef(({ data }, ref) => {
  const theme = useTheme();
  const chartRef = useRef();

  useImperativeHandle(ref, () => ({
    downloadPDF: async () => {
      const canvasContainer = chartRef.current;
      const originalOverflow = canvasContainer.style.overflow;
      const originalHeight = canvasContainer.style.height;

      canvasContainer.style.overflow = 'visible';
      canvasContainer.style.height = 'auto';

      await new Promise(resolve => setTimeout(resolve, 500));

      const canvas = await html2canvas(canvasContainer, {
        scrollY: -window.scrollY,
        useCORS: true,
        scale: 2,
        logging: false,
        allowTaint: true
      });

      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('l', 'mm', 'a4');
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = (canvas.height * pdfWidth) / canvas.width;

      pdf.setFontSize(16);
      pdf.setTextColor(40);
      pdf.text('Self Interested Candidates', pdfWidth / 2, 15, { align: "center" });

      pdf.addImage(imgData, 'PNG', 0, 20, pdfWidth, pdfHeight - 20);

      const dateStr = new Date().toLocaleDateString();
      pdf.setFontSize(10);
      pdf.setTextColor(150);
      pdf.text(`Exported on ${dateStr}`, pdfWidth - 15, pdf.internal.pageSize.getHeight() - 10, {
        align: "right"
      });

      pdf.save('SelfInterestChart.pdf');

      canvasContainer.style.overflow = originalOverflow;
      canvasContainer.style.height = originalHeight;
    }
  }));

  const generateTealColors = (count) => {
    return Array.from({ length: count }, (_, i) =>
      `hsl(${180 + (i * 25) % 90}, 75%, ${50 + (i % 4) * 8}%)`
    );
  };

  const { chartData, options, totalScore } = useMemo(() => {
    const interestedData = data
      .filter(item => item['Self-Interested Candidate']?.toString().toLowerCase() === 'yes')
      .sort((a, b) => b['Overall Percentage'] - a['Overall Percentage']);

    const totalScore = interestedData.reduce((sum, item) => sum + (item['Overall Percentage'] || 0), 0);

    const isFewData = interestedData.length <= 5;
    const barThickness = isFewData ? 30 : 'flex';

    const chartData = {
      labels: interestedData.map(item => item.Name),
      datasets: [
        {
          label: 'Score (%)',
          data: interestedData.map(item => item['Overall Percentage']),
          backgroundColor: generateTealColors(interestedData.length),
          borderColor: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.2)' : 'rgba(0,0,0,0.1)',
          borderWidth: 1,
          borderRadius: 12,
          barThickness,
          hoverBorderWidth: 2,
          hoverBorderColor: theme.palette.warning.light,
        }
      ]
    };

    const options = {
      indexAxis: 'x',
      responsive: true,
      maintainAspectRatio: false,
      layout: { padding: 20 },
      animation: { duration: 1200, easing: 'easeOutBack' },
      plugins: {
        legend: { display: false },
        datalabels: {
          anchor: 'end',
          align: 'end',
          color: theme.palette.text.primary,
          font: { size: 12, weight: 'bold', family: "'Montserrat', sans-serif" },
          formatter: value => `${value}%`,
        },
        tooltip: {
          backgroundColor: theme.palette.background.paper,
          titleColor: theme.palette.warning.main,
          bodyColor: theme.palette.text.primary,
          borderColor: theme.palette.divider,
          borderWidth: 1,
          padding: 12,
          cornerRadius: 10,
          titleFont: { size: 14, weight: 'bold' },
          bodyFont: { size: 12 },
          callbacks: {
            label: context => {
              const item = interestedData[context.dataIndex];
              return [
                `Score: ${context.raw}%`,
                `Status: ${item.Status}`,
                `Course: ${item.Course}`,
                `Manager: ${item.Manager || 'N/A'}`,
                `Self-Interested: Yes`
              ];
            }
          }
        }
      },
      scales: {
        x: {
          grid: { display: false },
          ticks: {
            color: theme.palette.text.primary,
            font: { size: 12, weight: 'bold', family: "'Montserrat', sans-serif" }
          },
          title: {
            display: true,
            text: 'Candidates',
            color: theme.palette.primary.main,
            font: { size: 14, weight: 'bold' }
          }
        },
        y: {
          beginAtZero: true,
          suggestedMax: 100,
          grid: {
            color: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.05)',
            drawBorder: false
          },
          ticks: {
            color: theme.palette.text.secondary,
            font: { size: 12, weight: 'bold' }
          },
          title: {
            display: true,
            text: 'Score (%)',
            color: theme.palette.primary.main,
            font: { size: 14, weight: 'bold' }
          }
        }
      }
    };

    return { chartData, options, totalScore };
  }, [data, theme]);

  return (
    <Box 
      ref={chartRef} 
      data-pdf-export
      sx={{ 
        width: '100%',
        height: 'calc(100vh - 180px)',
        p: 2,
        background: theme.palette.mode === 'dark'
          ? 'linear-gradient(135deg, #1a1a2e, #16213e)'
          : 'linear-gradient(135deg, #f5f7fa, #e4e8f0)',
        borderRadius: 3,
        boxShadow: theme.shadows[3],
        overflow: 'hidden'
      }}
    >
      <Box sx={{ 
        width: '100%',
        height: '100%',
        overflow: 'auto',
        '&::-webkit-scrollbar': {
          width: 10,
          height: 10
        },
        '&::-webkit-scrollbar-thumb': {
          background: theme.palette.mode === 'dark'
            ? 'linear-gradient(135deg, #4a6fa5, #166d67)'
            : 'linear-gradient(135deg, #1976d2, #0288d1)',
          borderRadius: 10,
          border: theme.palette.mode === 'dark'
            ? '1px solid rgba(255,255,255,0.1)'
            : '1px solid rgba(255,255,255,0.3)'
        },
        '&::-webkit-scrollbar-track': {
          background: theme.palette.mode === 'dark'
            ? 'rgba(255,255,255,0.05)'
            : 'rgba(0,0,0,0.05)',
          borderRadius: 10
        },
        '&::-webkit-scrollbar-corner': {
          background: 'transparent'
        }
      }}>
        <Box sx={{ 
          minWidth: 'fit-content',
          minHeight: 'fit-content',
          padding: 1
        }}>
          <Bar 
            data={chartData} 
            options={options} 
            style={{ 
              minWidth: Math.max(chartData.labels.length * 100, 800),
              minHeight: 500 
            }}
          />
        </Box>
      </Box>
      <Box sx={{ 
        mt: 2, 
        textAlign: 'right', 
        fontWeight: 'bold',
        color: theme.palette.text.primary,
        fontFamily: "'Montserrat', sans-serif"
      }}>
        Total Combined Score: {totalScore.toFixed(2)}%
      </Box>
    </Box>
  );
});

export default SelfInterestChart;


